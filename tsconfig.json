{
  "compilerOptions": {                                   /* 用于指定编译器的选项，例如输出目标、模块系统、代码生成方式、严格模式等 */
    /* Projects */
    // "incremental": true,                              /* TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度。 */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 增量编译文件的存储位置。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* 指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。 */
    "lib": [ "DOM", "ES2015", "ScriptHost"],             /* 指定编译时需要引用的库文件。 */
    // "jsx": "preserve",                                /* 指定 JSX 代码生成方式。"React" 或 "Preserve" */
    // "experimentalDecorators": true,                   /* 启用实验性的装饰器语法。 */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* 指定生成目标为react JSX时，使用的JSX工厂函数，比如 React.createElement 或 h 。*/
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* 不包含默认的库文件（ lib.d.ts） */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* 指定模块系统的类型。 "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015", "ESNext", "ES2020"，只有 "AMD"和 "System"能和 --outFile一起使用，"ES6"和 "ES2015"可使用在目标输出为 "ES5"或更低的情况下。默认值：target === "ES6" ? "ES6" : "commonjs"*/
    // "rootDir": "./",                                  /* 指定输出文件目录(用于输出)，用于控制输出目录结构 */
    // "moduleResolution": "node",                       /* 模块解析策略，ts默认用node的解析策略，即相对的方式导入。 */
    // "baseUrl": "./",                                  /* 解析非相对模块的基地址，默认是当前目录 */
    // "paths": {                                        /* 模块名到基于 baseUrl的路径映射的列表 */
    //     "jquery": [
    //     "node_modules/jquery/dist/jquery.min.js"
    //   ]
    // },                                      
    // "rootDirs": [],                                   /* 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错 */
    // "typeRoots": [],                                  /* 声明文件目录，默认时node_modules/@types */
    // "types": [],                                      /* 要包含的类型声明文件名列表 */
    // "allowUmdGlobalAccess": true,                     /* 允许在模块中全局变量的方式访问umd模块 */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* 允许导入扩展名为“.json”的模块 */
    // "noResolve": true,                                /* 不把 /// <reference``>或模块导入的文件加到编译文件列表。 */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许编译器编译JS，JSX文件 */
    // "checkJs": true,                                  /* 在 .js文件中报告错误。与allowJs配合使用。 */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* 生成 .d.ts 声明文件。 */
    // "declarationMap": true,                           /* 为声明文件生成sourceMap */
    // "emitDeclarationOnly": true,                      /* 只生成声明文件，而不会生成js文件. */
    // "sourceMap": true,                                /* 生成源映射文件。 */
    // "outFile": "./",                                  /* 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD". */
    // "outDir": "./",                                   /* 指定输出目录。 */
    // "removeComments": true,                           /* 删除所有注释，除了以 /!*开头的版权信息 */
    // "noEmit": true,                                   /* 不输出文件,即编译后不会生成任何js文件 */
    // "importHelpers": true,                            /* 通过tslib引入helper函数，文件必须是模块（比如 __extends， __rest等 */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现 */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中. */
    // "inlineSources": true,                            /* 将代码与sourcemaps生成到一个文件中，要求同时设置了 --inlineSourceMap或 --sourceMap属性 */
    // "emitBOM": true,                                  /* 在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。 */
    // "newLine": "crlf",                                /* 当生成文件时指定行结束符： "crlf"（windows）或 "lf"（unix）。 */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用 */
    // "noEmitOnError": true,                            /* 发送错误时不输出任何文件 */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* 指定生成声明文件存放目录。 */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 将每个文件作为单独的模块（与“ts.transpileModule”类似）。 */
    // "allowSyntheticDefaultImports": true,             /* 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。默认值：module === "system" 或设置了 --esModuleInterop 且 module 不为 es2015 / esnext */
    "esModuleInterop": true,                             /* 允许以 CommonJS 模块的形式导入模块。 */
    // "preserveSymlinks": true,                         /* 不把符号链接解析为其真实路径；将符号链接文件视为真正的文件. */
    "forceConsistentCasingInFileNames": true,            /* 禁止对同一个文件的不一致的引用。 */

    /* Type Checking */
    "strict": true,                                      /* 启用所有严格类型检查选项。启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization */
    // "noImplicitAny": true,                            /* 不允许隐式的any类型,在表达式和声明上有隐含的 any类型时报错 */
    // "strictNullChecks": true,                         /* 不允许把null、undefined赋值给其他类型的变量.在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void） */
    // "strictFunctionTypes": true,                      /* 不允许函数参数双向协变 */
    // "strictBindCallApply": true,                      /* 严格的bind/call/apply检查 */
    // "strictPropertyInitialization": true,             /* 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks */
    // "noImplicitThis": true,                           /* 不允许this有隐式的any类型 */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* 在代码中注入'use strict',以严格模式解析并为每个源文件生成 "use strict"语句。 */
    // "noUnusedLocals": true,                           /* 若有未使用的局部变量则抛错 */
    // "noUnusedParameters": true,                       /* 检若有未使用的函数参数则抛错 */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* 每个分支都会有返回值，不是函数的所有返回路径都有返回值时报错. */
    // "noFallthroughCasesInSwitch": true,               /* 防止switch语句贯穿(即如果没有break语句后面不会执行). */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* 不报告未使用的标签错误。 */
    // "allowUnreachableCode": true,                     /* 不报告执行不到的代码错误。 */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* 忽略所有的声明文件（ *.d.ts）的类型检查 */
  },
  // "include": [],                                      /* 指定一个文件glob匹配模式列表 */
  // "exclude": [],                                      /* 不包括一个文件glob匹配模式列表 */
  // "files": [],                                        /* 指定一个文件glob匹配模式列表 */
  // "extends": ""                                       /* 继承配置 */
}
